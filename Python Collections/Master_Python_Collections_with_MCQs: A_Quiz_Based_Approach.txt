1
Which of the following options are correct about the list?

Check all the correct answers.


pop() method removes an element from the end of the list.


pop() method removes an element from the beginning of the list.


append() method adds an element to the beginning of the list.


insert() method adds an element to the beginning, middle, or end of the list.


append() method adds an element to the end of the list.

Correct
append() method adds an element to the end of the list.
pop() method removes an element from the end of the list.
insert() method adds an element to the beginning, middle, or end of the list.
l = [1, 2, 3]
l.append(4)
print(l)
# [1, 2, 3, 4]

l.pop()
print(l)
# [1, 2, 3]

l.insert(0, 0)
print(l)
# [0, 1, 2, 3]
2
Which of the following is true about a Python dictionary?

Check all the correct answers.

Assuming the version of Python is 3.7+


It can only contain elements of the same data type.


It can be modified once it is created.


It is accessed by index.


It is an ordered collection of elements.

Correct
Dectionaries can be modified once it is created because dictionaries are mutable.
Dictionaries are not accessed by index as they are unordered collections of elements.
Dictionaries can contain elements of different data types.
3
Which of the following methods can be used to add a key-value pair to a Python dictionary?

Choose the correct answer.


insert()


remove()


append()


update()

Correct
update() method can be used to add a key-value pair to a dictionary.

d = {'a': 1, 'b': 2}
d.update({'c': 3})
4
Which of the following methods can be used to get a list of key-value pairs from a Python dictionary?

Choose the correct answer.


sort()


values()


items()


keys()

Correct
items() method can be used to get a list of key-value pairs from a dictionary.

d = {'a': 1, 'b': 2}
print(d.items())
# [('a', 1), ('b', 2)]
5
Which of the following is true about slicing in Python lists?

Choose the correct answer.


It is only possible to slice a list from a specific index to the end.


It is only possible to slice a list from the beginning to a specific index.


It is possible to slice a list from both the beginning and end.


Slicing is not possible in Python lists.

Correct
It is possible to slice a list from both the beginning and end.

l = [1, 2, 3, 4, 5]
print(l[1:3])
# [2, 3]
print(l[:3])
# [1, 2, 3]
print(l[3:])
# [4, 5]
6
Which of the following methods can be used to remove a specific element from a Python list?

Choose the correct answer.


append()


sort()


remove()


pop()

Correct
remove() method can be used to remove a specific element from a list.

l = [1, 2, 3, 4, 5]
l.remove(3)
print(l)
# [1, 2, 4, 5]
7
Which of the following is true about a Python List and Dictionary?

Check all the correct answers.


A list can only contain elements of the same data type.


A dictionary can contain keys and values of different data types.


A list can only contain numeric data types.


A list can contain elements of different data types.


A dictionary can only contain values of the same data type.

Correct
A list can contain elements of different data types.
A dictionary can contain keys and values of different data types.
l = [1, 'a', 2.0]
print(l)
# [1, 'a', 2.0]

d = {'a': 1, 2: 'b'}
print(d)
# {'a': 1, 2: 'b'}
8
Which of the following methods can be used to add multiple elements to a Python list at once?

Choose the correct answer.


append()


remove()


extend()


insert()

Correct
extend() method can be used to add multiple elements to a list at once.

l = [1, 2, 3]
l.extend([4, 5])
print(l)
# [1, 2, 3, 4, 5]
9
Which of the following is true about the zip() function in Python?

Choose the correct answer.


It is used to combine two or more lists into a single list.


It is used to create a dictionary from two or more lists.


It is used to sort a list in ascending order.


It is used to create a list of tuples from two or more lists

Correct
zip() function is used to create a list of tuples from two or more lists, where the i-th tuple contains the i-th element from each of the argument sequences or iterables.

l1 = [1, 2, 3]
l2 = ['a', 'b', 'c']
print(list(zip(l1, l2)))
# [(1, 'a'), (2, 'b'), (3, 'c')]
10
What is the output of the following code?

my_list = [1, 2, 3, 4, 5]
my_list[-1:-4:-1] = [0, 0, 0]
print(my_list)

[1, 2, 0, 4, 5]


[1, 2, 3, 4, 5, 0]


[0, 2, 3, 4, 5]


[1, 2, 0, 0, 0]

Correct
The slice notation [-1:-4:-1] selects the last three elements of the list in reverse order, i.e., [5, 4, 3]. The assignment [0, 0, 0] replaces the last element of the selected slice with 0, resulting in the modified list [1, 2, 0, 0, 0].

11
Which of the following is a valid way to create an empty dictionary in Python?

Check all the correct answers.


my_dict = ()


my_dict = dict()


my_dict = set()


my_dict = {}

Correct
An empty dictionary can be created using curly braces {} or the dict() constructor function, but not with parentheses () or the set() function.

my_dict = {}
print(type(my_dict))
# <class 'dict'="">

my_dict = dict()
print(type(my_dict))
# <class 'dict'="">

my_dict = ()
print(type(my_dict))
# <class 'tuple'="">

my_dict = set()
print(type(my_dict))
# <class 'set'="">
12
What is the output of the following code?

my_dict = {'apple': 1, 'banana': 2, 'cherry': 3}
print(my_dict.get('banana', 0), end=',')
print(my_dict.get('orange', 0))

None, 0


2, 0


2, None


None, None

Correct
The output is 2, 0.
The get() method retrieves the value of a key from a dictionary, or returns a default value if the key is not found. In this case, the first print statement retrieves the value 2 for the key 'banana', and the second print statement retrieves the default value 0 for the key 'orange', which is not in the dictionary.

13
What is the output of the following code?

my_list = [1, 2, 3]
my_dict = {'a': 'apple', 'b': 'banana'}
print(my_list + list(my_dict.values()))

[1, 2, 3, 'apple', 'banana']


[1, 2, 3, {'a': 'apple', 'b': 'banana'}]


[1, 2, 3, ['apple', 'banana']]


[1, 2, 3, 'a', 'b', 'apple', 'banana']

Correct
The output is [1, 2, 3, 'apple', 'banana'].
The + operator can be used to concatenate two lists, and the values of a dictionary can be converted to a list using the values() method. In this case, the result is the list [1, 2, 3, 'apple', 'banana'].

14
Which of the following is a valid way to add a new key-value pair to a dictionary in Python?

Check all the correct answers.


my_dict.insert(key, value)


my_dict.update(key, value)


my_dict[key] = value


my_dict.add(key, value)

Correct
A new key-value pair can be added to a dictionary using the square bracket notation my_dict[key] = value, but not with the add(), update(), or insert() methods.

15
What is the output of the following code?

my_list = [1, 2, 3]
print([i * 2 for i in my_list])

[1, 4, 9]


[1, 2, 3, 1, 2, 3]


[1, 2, 3, 4, 5, 6]


[2, 4, 6]

Correct
The output is [2, 4, 6].
A list comprehension can be used to create a new list based on an existing list. In this case, the expression i * 2 is applied to each item in the list [1, 2, 3], resulting in the new list [2, 4, 6].

16
Which of the following methods can be used to sort a Python list in place?

Check all the correct answers.


index()


sorted()


reverse()


sort()

Correct
The sort() method can be used to sort a list in ascending order in place. The sorted() function returns a new sorted list, reverse() is used to reverse the order of the list, and index() returns the index of the first occurrence of a specified value in the list.

17
Which of the following is valid way to create a dictionary

Which of the following is a valid way to create a dictionary with keys based on a list and values based on a second list of the same length?


my_dict = {1: 'a', 2: 'b', 3: 'c'}


my_dict = dict(zip([1, 2, 3], ['a', 'b', 'c']))


my_dict = {['a', 'b', 'c']: [1, 2, 3]}


my_dict = dict([1, 2, 3], ['a', 'b', 'c'])

Correct
The zip() function can be used to create a list of tuples from two lists of the same length. The dict() function can be used to create a dictionary from a list of tuples. In this case, the result is the dictionary {1: 'a', 2: 'b', 3: 'c'}.

18
What is the output of the following code?

my_list = [x**2 for x in range(10) if x % 2 == 0]
print(my_list)

[0, 4, 16, 36, 64]


[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]


[1, 3, 5, 7, 9]


[2, 6, 10, 14, 18]

Correct
This list comprehension creates a new list by squaring each even integer in the range from 0 to 9. The conditional expression if x % 2 == 0 filters out odd integers, resulting in the list [0, 4, 16, 36, 64].

19
Which of the following is a valid way to remove a key-value pair from a Python dictionary?

Check the correct answers.


my_dict.pop('key')


my_dict.delete('key')


my_dict.remove('key')


my_dict.popitem('key')

Correct
The pop() method removes the item with the specified key name, and returns the value of the removed item. The popitem() method removes the last inserted item, and returns a tuple containing the key and value of the removed item. The remove() method removes the specified item from the list, and the delete() method does not exist for dictionaries.

20
Which of the following is correct way to create a list

Which of the following is a valid way to create a list of integers from 0 to 99 using a list comprehension?


[x for x in range(1, 100)]


[x**2 for x in range(100)]


[x for x in range(100)]


[x if x % 2 == 0 for x in range(100)]

Correct
The correct answer is [x for x in range(100)].
The range() function can be used to create a list of integers from 0 to 99. The x**2 expression is applied to each item in the list, resulting in a list of squares of integers from 0 to 99. The conditional expression x % 2 == 0 filters out odd integers, resulting in a list of even integers from 0 to 98.

21
Which of the following is a valid way to check if a key is in a Python dictionary?

Check the correct answers.


'key' in my_dict


my_dict.contains_key('key')


my_dict.has_key('key')


my_dict.get('key') is not None

Correct
The in operator can be used to check if a key is in a dictionary. The has_key() method returns True if the specified key exists in the dictionary, otherwise, it returns False. The contains_key() method does not exist for dictionaries. The get() method returns the value of the specified key, or None if the key does not exist in the dictionary.

You may think my_dict.get('key') is not None this might also be correct but in some cases, it won't work. Check the example code below:

my_dict = {'name': 'Alice', 'age': None, 'city': 'New York'}

print('age' in my_dict)
Here, as the value of key is None, it will return False.

22
Which of the following is a valid way to remove a key-value pair from a Python dictionary?

Check the correct answers.


my_dict.remove('key')


my_dict.pop('value')


del my_dict['key']


my_dict.delete('key')

Correct
The del keyword can be used to remove a key-value pair from a dictionary. The delete() method does not exist for dictionaries. The remove() method removes the specified item from the list, and the pop() method removes the item with the specified key name, and returns the value of the removed item.

23
Which of the following statements about list comprehensions in Python is true?

Check the correct answers.


List comprehensions can only contain if clauses, but not else clauses.


List comprehensions can only be used to create new lists.


List comprehensions can only be used to iterate over one iterable.


List comprehensions can be nested to create more complex expressions.

Correct
List comprehensions can be nested to create more complex expressions. List comprehensions can be used to create new lists, but they can also be used to create sets and dictionaries. List comprehensions can contain if and else clauses. List comprehensions can be used to iterate over multiple iterables.

24
What is the output of the following code?

my_dict = {'apple': 2, 'banana': 3, 'orange': 4}
my_dict.update({'apple': 4, 'pear': 1})
print(my_dict)

{'apple': 2, 'banana': 3, 'orange': 4, 'pear': 1}


{'apple': 2, 'banana': 3, 'orange': 4}


{'apple': [2, 4], 'banana': 3, 'orange': 4, 'pear': 1}


{'apple': 4, 'banana': 3, 'orange': 4, 'pear': 1}

Correct
The update() method is used to add or update key-value pairs in a dictionary using another dictionary or an iterable of key-value pairs. In this case, the update() method adds the key-value pairs 'apple': 4 and 'pear': 1 to my_dict, and updates the value of the existing key 'apple' from 2 to 4.
